@using BlazorSample.Shared
@page "/fetchbills"
@inject HttpClient Http

<h1>Monthly Bills</h1>

<p>This component demonstrates fetching data from the server.</p>
<p>random number: @dieRoll </p>

<button class="btn btn-primary" onclick="@DieRoll">Roll Die</button>
<button class="btn btn-primary" onclick="@December">December</button>
<button class="btn btn-primary" onclick="@RetrieveMonth">Month</button>
Credit Card Balance:<input type="text" bind="@CreditCardBalance" /><br />
<button class="btn btn-secondary" onclick="@Analyze">Analyze</button>

<select bind="@theMonth" id="theMonth">
    @foreach (var month in months)
    {
        <option value=@month>@month</option>
    }
</select>

@if (bills == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Debit</th>
                <th>Credit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in bills)
            {
                <tr style="color:blue">
                    <td style="color:blue">@bill.Date.ToShortDateString()</td>
                    <td style="color:blue">@bill.Description</td>
                    <td style="color:blue">@bill.Debit.EmptyIfZero()</td>
                    <td style="color:blue">@bill.Credit.EmptyIfZero()</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (groupBills == null)
{
    <p><em>no analysis...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Debit</th>
                <th>Credit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bill in groupBills)
            {
                <tr style="color:blue">
                    <td style="color:blue">@bill.Date.ToShortDateString()</td>
                    <td style="color:blue">@bill.Description</td>
                    <td style="color:blue">@bill.Debit.EmptyIfZero()</td>
                    <td style="color:blue">@bill.Credit.EmptyIfZero()</td>
                </tr>
            }
        </tbody>
    </table>
}






@functions {
    Bill[] bills;
    List<Bill> groupBills;
    List<string> months = new List<string>();
    string theMonth;
    string CreditCardBalance;

    protected override async Task OnInitAsync()
    {
        bills = await Http.GetJsonAsync<Bill[]>("api/Bills/GetBills");

        for (int i = 1; i <= 12; i++)
        {
            months.Add(i.ToString());
        }
        this.StateHasChanged();
    }

    int dieRoll;

    void DieRoll()
    {
        Random random = new Random();
        dieRoll = random.Next(6);
    }

    protected async Task December()
    {
        bills = await Http.GetJsonAsync<Bill[]>("api/Bills/GetBills/12");
        Random random = new Random();
        dieRoll = random.Next(6);
        this.StateHasChanged();
    }

    protected async Task DoStuff()
    {
        bills = await Http.GetJsonAsync<Bill[]>($"api/Bills/GetBills/{theMonth}");
        Random random = new Random();
        dieRoll = random.Next(6);
        this.StateHasChanged();
    }

    protected async Task RetrieveMonth()
    {
        bills = await Http.GetJsonAsync<Bill[]>($"api/Bills/GetBills/{theMonth}");
        Random random = new Random();
        dieRoll = random.Next(6);
        this.StateHasChanged();
    }

    protected async Task Analyze()
    {
        bills = await Http.GetJsonAsync<Bill[]>($"api/Bills/Analyze/{theMonth}");

        var groupedBills = bills
    .GroupBy(u => u.Credit)
    .Select(grp => grp.ToList());


        this.StateHasChanged();

    }


}
